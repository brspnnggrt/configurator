{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","formRef","React","createRef","onMessageReceived","event","data","taskId","state","taskIdRequestData","update","taskIdAttributeChangeEvent","requestData","window","parent","postMessage","iframe","id","query","api","function","arguments","response","status","model","find","r","current","setFieldsValue","Attributes","reduce","acc","attr","PA_ID","Values","v","Selected","ValueCode","setState","loading","changeHandler","item","innerItem","runScript","script","PAV_ID","addEventListener","className","this","ref","name","labelCol","span","wrapperCol","onFinish","onFinishFailed","autoComplete","initialValues","map","Item","label","Name","rules","required","Required","message","disabled","IsEnabled","onChange","value","Option","ValueDisplay","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e936c27.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Form, Select } from 'antd';\n\nclass App extends React.Component {\n  \n  formRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    const id = 'antd-staubli-configurator';\n    this.state = {\n      loading: true,\n      id: id,\n      taskIdRequestData: `${id}-requestData`,\n      taskIdAttributeChangeEvent: `${id}-attributeChangeEvent`,\n      data: { Attributes: []}\n    };\n    window.addEventListener(\"message\", this.onMessageReceived, false);\n    this.requestData();\n\n    window.parent.postMessage({\n      runScript: true,\n      script: `\n                cpq.models.configurator.attributes.subscribe(() => {\n                  let attributeChangeEvent = {\n                    taskId: '${this.state.taskIdAttributeChangeEvent}'\n                  };\n                  let iframe = document.getElementById('${this.state.id}');\n                  iframe.contentWindow.postMessage(attributeChangeEvent, \"https://brspnnggrt.github.io/\");\n                });\n              `\n    }, \"https://eusb.webcomcpq.com/\");\n  }\n\n  onMessageReceived = event => {\n    if (event.data.taskId === this.state.taskIdRequestData) this.update(event);\n    if (event.data.taskId === this.state.taskIdAttributeChangeEvent) this.requestData();\n  };\n\n  requestData = () => {\n    window.parent.postMessage({\n      iframe: this.state.id,\n      taskId: this.state.taskIdRequestData,\n      query: [{\n        api: '/api/rd/v1/Configurator',\n        function: 'getModel',\n        arguments: [{\n          'fakekey': 'fakevalue'\n        }]\n      }],\n      response: [],\n      status: 'request'\n    }, \"https://eusb.webcomcpq.com/\");\n  };\n\n  update = event => {\n    // prepare data\n    let model = event.data.response.find(r => r.api === '/api/rd/v1/Configurator' && r.function === 'getModel');\n\n    if (this.formRef && this.formRef.current){\n      this.formRef.current.setFieldsValue(model.data.Attributes.reduce((acc, attr) => { \n        acc[attr.PA_ID] = attr.Values.find(v=>v.Selected)?.ValueCode || 'empty';\n        return acc;\n      }, {}));\n    }\n\n    // update state if data available\n    this.setState({\n      loading: false,\n      data: model.data\n    });\n  };\n\n  changeHandler = (item, innerItem) => {\n    // innerItem.Selected = checked;\n    //this.state.data.Attributes.find(a => a == item).Values.find(v => v == innerItem).Selected = checked;\n    this.setState({\n      loading: false,\n      data: this.state.data\n    });\n    window.parent.postMessage({\n      runScript: true,\n      script: `\n                selectedValue = cpq.models.configurator.attributes().find(a => a.id() == ${item.PA_ID}).values().find(v => v.pavId == ${innerItem.PAV_ID});\n                                cpq.models.configurator.attributes().find(a => a.id() == ${item.PA_ID}).selectedValue(selectedValue);\n              `\n    }, \"https://eusb.webcomcpq.com/\");\n    // this.requestData();\n  }\n\n  render() {\n    return (\n\n      // this.state.data.Attributes[].Values[].ValueDisplay\n\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" style={{'height': '100px'}}/>\n        </header> */}\n        <div className=\"App-content\">\n          {this.state.loading &&\n            <span>loading data...</span>\n          }\n          {!this.state.loading &&\n            <Form\n            ref={this.formRef}\n            name=\"basic\"\n            labelCol={{ span: 8 }}\n            wrapperCol={{ span: 16 }}\n            // initialValues={{ remember: true }}\n            onFinish={null}\n            onFinishFailed={null}\n            autoComplete=\"off\"\n            initialValues={this.state.data.Attributes.reduce((acc, attr) => { \n              acc[attr.PA_ID] = attr.Values.find(v=>v.Selected)?.ValueCode || 'empty';\n              return acc;\n            }, {})}>\n              {this.state.data.Attributes.map((item) =>\n              <Form.Item\n                label={item.Name}\n                name={item.PA_ID}\n                rules={[{ required: item.Required, message: `Please input ${item.Name}!` }]}>\n                <Select disabled={!item.IsEnabled} onChange={(value) => this.changeHandler(item, item.Values.find(v=>(v.ValueCode || 'empty')==value))}>\n                  {item.Values.map(value => \n                    <Select.Option value={value.ValueCode || 'empty'}>{value.ValueDisplay}</Select.Option>\n                  )}\n                </Select>\n              </Form.Item>\n              )}\n            </Form>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}